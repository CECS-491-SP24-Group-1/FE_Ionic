import React, { useState } from "react";
import taxios from "../../util/token_refresh_hook";
import useVaultStore from "../../stores/vault_store";
import { useHistory } from "react-router-dom";

interface CreateChatRoomProps {
	onRoomCreated?: () => void; // Optional callback to close modal
}

const CreateChatRoom: React.FC<CreateChatRoomProps> = ({ onRoomCreated }) => {
	const [roomName, setRoomName] = useState("");
	const [participants, setParticipants] = useState("");
	const [error, setError] = useState("");
	const [success, setSuccess] = useState("");

	const addChatRoom = useVaultStore((state) => state.addChatRoom); // Zustand store to add new chat rooms
	const history = useHistory();

	const api = import.meta.env.VITE_API_URL;

	const handleSubmit = async (e: React.FormEvent) => {
		e.preventDefault();
		setError("");
		setSuccess("");

		// Split participants into an array
		const participantsArray = participants.split(",").map((p) => p.trim());

		try {
			// Make API call to create the chat room
			const token = localStorage.getItem("authToken");
			const response = await taxios.post(
				`${api}/chat/room/create`, // Backend route
				{ participants: participantsArray }
			);

			// Extract room data from the backend's response
			const newRoom = response.data.payloads[0]; // Assuming room details come in the first payload

			// Add the new chat room to Zustand store
			addChatRoom({
				id: newRoom.id, // Use the UUID generated by the backend
				name: roomName,
				avatar: "https://i.pravatar.cc/300?u=newroom", // Placeholder avatar
				lastMessage: "Room created",
				time: new Date().toLocaleTimeString()
			});

			// Display success message
			setSuccess("Chat room created successfully!");

			// // Navigate to the newly created chat room
			// history.push(`/chat/room/${newRoom.id}`);

			// Clear the form fields
			setRoomName("");
			setParticipants("");

			// If a callback is provided, close the modal after the room is created
			if (onRoomCreated) {
				onRoomCreated();
			}
		} catch (error) {
			setError("Failed to create chat room. Please try again.");
			console.error("Error creating chat room:", error);
		}
	};

	return (
		<div>
			{error && <p style={{ color: "red" }}>{error}</p>}
			{success && <p style={{ color: "green" }}>{success}</p>}

			<form onSubmit={handleSubmit}>
				<label htmlFor="participants">Participants (comma-separated UUIDs):</label>
				<input
					id="participants"
					type="text"
					value={participants}
					onChange={(e) => setParticipants(e.target.value)}
					required
				/>

				<label htmlFor="roomName">Chat Room Name:</label>
				<input
					id="roomName"
					type="text"
					value={roomName}
					onChange={(e) => setRoomName(e.target.value)}
					required
				/>

				<button type="submit">Create Chat Room</button>
			</form>
		</div>
	);
};

export default CreateChatRoom;
