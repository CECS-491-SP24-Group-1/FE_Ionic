// Code generated by tygo. DO NOT EDIT.
import { KeyStore } from "./keystore";
//////////
// source: evault.go

/**
 * Represents a vault that holds a user's messages and cryptographic keys. This
 * struct serves as a model for a vault that is encrypted and at rest. This form
 * of a vault should be the one stored when the user is not currently using it
 * to prevent theft of the user's cryptographic keys and other sensitive info.
 * To derive a `Vault` object, simply decrypt this one with the symmetric key
 * that was used to encrypt it.
 */
export interface EVault {
	id: string; // The ID of this vault object.
	subject: string; // The ID of the user to whom this vault belongs.
	sec_type: "NONE" | "ENC_KEY" | "PASSPHRASE" | "QR" | "BIOMETRICS" | "HW_KEY"; // The type of security that this vault has.
	salt: string; // The salt used when encrypting this vault with passphrase-based methods.
	payload_size: number /* uint64 */; // The size of the encrypted payload in bytes
	payload: string; // The actual contents of the encrypted vault, encoded as a Base64 string.
}

//////////
// source: vault.go

/**
 * Represents a vault that holds a user's messages and cryptographic keys. This
 * struct serves as a model for a vault that is decrypted and available for use.
 * When not in use, objects of this struct should be encrypted to produce an
 * `EVault` object.
 */
export interface Vault {
	id: string; // The ID of this vault object.
	subject: string; // The ID of the user to whom this vault belongs.
	last_mod: string; // The at which this vault was last changed.
	dev_ident: string; // The user agent of the user that created this vault.
	note: string; // An optional note about the contents of the vault.
	kstore: KeyStore; // Holds the user's public and private keys.
}
